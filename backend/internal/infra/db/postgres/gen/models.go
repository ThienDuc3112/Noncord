// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package gen

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type OverwriteTarget string

const (
	OverwriteTargetRole OverwriteTarget = "role"
	OverwriteTargetUser OverwriteTarget = "user"
)

func (e *OverwriteTarget) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OverwriteTarget(s)
	case string:
		*e = OverwriteTarget(s)
	default:
		return fmt.Errorf("unsupported scan type for OverwriteTarget: %T", src)
	}
	return nil
}

type NullOverwriteTarget struct {
	OverwriteTarget OverwriteTarget
	Valid           bool // Valid is true if OverwriteTarget is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOverwriteTarget) Scan(value interface{}) error {
	if value == nil {
		ns.OverwriteTarget, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OverwriteTarget.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOverwriteTarget) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OverwriteTarget), nil
}

type ScopeType string

const (
	ScopeTypeSERVER  ScopeType = "SERVER"
	ScopeTypeCHANNEL ScopeType = "CHANNEL"
	ScopeTypeDM      ScopeType = "DM"
)

func (e *ScopeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScopeType(s)
	case string:
		*e = ScopeType(s)
	default:
		return fmt.Errorf("unsupported scan type for ScopeType: %T", src)
	}
	return nil
}

type NullScopeType struct {
	ScopeType ScopeType
	Valid     bool // Valid is true if ScopeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScopeType) Scan(value interface{}) error {
	if value == nil {
		ns.ScopeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScopeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScopeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScopeType), nil
}

type Attachment struct {
	ID        uuid.UUID
	Filetype  string
	Url       string
	Filename  string
	MessageID *uuid.UUID
	UserID    uuid.UUID
	Size      int32
}

type BanEntry struct {
	ServerID  uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
}

type Category struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time
	ServerID  uuid.UUID
	Name      string
	Ordering  int16
}

type Channel struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      *time.Time
	Name           string
	Description    string
	ServerID       uuid.UUID
	Ordering       int16
	ParentCategory *uuid.UUID
}

type ChannelPermissionOverwrite struct {
	ChannelID  uuid.UUID
	RoleID     *uuid.UUID
	UserID     *uuid.UUID
	TargetType OverwriteTarget
	UpdatedAt  time.Time
	Allow      int64
	Deny       int64
}

type DmGroup struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time
	Name      string
	IconUrl   string
	IsGroup   bool
}

type DmGroupsMember struct {
	MemberID uuid.UUID
	GroupID  uuid.UUID
	JoinedAt time.Time
}

type Emote struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time
	ServerID  uuid.UUID
	Name      string
	IconUrl   string
}

type FriendRequest struct {
	CreatedAt time.Time
	Requester uuid.UUID
	Target    uuid.UUID
	Message   string
}

type Friendship struct {
	CreatedAt time.Time
	UserID1   uuid.UUID
	UserID2   uuid.UUID
}

type Invitation struct {
	ID             uuid.UUID
	ServerID       uuid.UUID
	CreatedAt      time.Time
	ExpiredAt      *time.Time
	BypassApproval bool
	JoinLimit      int32
	JoinCount      int32
}

type JoinRequest struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	ApprovedAt    *time.Time
	RevokedAt     *time.Time
	ServerID      uuid.UUID
	Requester     uuid.UUID
	Approver      *uuid.UUID
	ApprovedState bool
}

type Membership struct {
	ID        uuid.UUID
	ServerID  uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	Nickname  string
}

type Message struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time
	ChannelID *uuid.UUID
	GroupID   *uuid.UUID
	AuthorID  uuid.UUID
	Message   string
}

type Outbox struct {
	ID            uuid.UUID
	AggregateName string
	AggregateID   uuid.UUID
	EventType     string
	SchemaVersion int32
	OccurredAt    time.Time
	Payload       []byte
	Status        string
	Attempts      int32
	ClaimedAt     *time.Time
	PublishedAt   *time.Time
}

type Reaction struct {
	MessageID uuid.UUID
	UserID    uuid.UUID
	EmoteID   uuid.UUID
}

type Role struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	DeletedAt    *time.Time
	Name         string
	Color        int32
	Priority     int16
	AllowMention bool
	Permissions  int64
	ServerID     uuid.UUID
}

type RoleAssignment struct {
	MembershipID uuid.UUID
	RoleID       uuid.UUID
}

type Server struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	DeletedAt           *time.Time
	Name                string
	Description         string
	IconUrl             string
	BannerUrl           string
	NeedApproval        bool
	AnnouncementChannel *uuid.UUID
	Owner               uuid.UUID
	DefaultPermssion    int64
}

type Session struct {
	ID            uuid.UUID
	RotationCount int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ExpiresAt     time.Time
	UserID        uuid.UUID
	UserAgent     string
	RefreshToken  string
}

type User struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   *time.Time
	Username    string
	DisplayName string
	AboutMe     string
	Email       string
	Password    pgtype.Text
	Disabled    bool
	AvatarUrl   string
	BannerUrl   string
	Flags       int16
}

type UserNotificationOverride struct {
	ReferenceID          uuid.UUID
	UserID               uuid.UUID
	UpdatedAt            time.Time
	NotificationSettings int16
	Scope                ScopeType
}

type UserSetting struct {
	UserID                     uuid.UUID
	Language                   string
	DmAllowOption              int16
	DmFilterOption             int16
	FriendRequestPermission    int16
	CollectAnalyticsPermission bool
	Theme                      string
	ShowEmote                  bool
	NotificationSettings       int16
	AfkTimeout                 int64
}
