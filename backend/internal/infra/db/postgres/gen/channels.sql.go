// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channels.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteChannel = `-- name: DeleteChannel :exec
UPDATE channels SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteChannel, id)
	return err
}

const findChannelById = `-- name: FindChannelById :one
SELECT id, created_at, updated_at, deleted_at, name, description, server_id, ordering, parent_category FROM channels WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) FindChannelById(ctx context.Context, id uuid.UUID) (Channel, error) {
	row := q.db.QueryRow(ctx, findChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.ServerID,
		&i.Ordering,
		&i.ParentCategory,
	)
	return i, err
}

const findChannelsByIds = `-- name: FindChannelsByIds :many
SELECT id, created_at, updated_at, deleted_at, name, description, server_id, ordering, parent_category FROM channels WHERE id = ANY($1::UUID[]) AND deleted_at IS NULL
`

func (q *Queries) FindChannelsByIds(ctx context.Context, ids []uuid.UUID) ([]Channel, error) {
	rows, err := q.db.Query(ctx, findChannelsByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.ServerID,
			&i.Ordering,
			&i.ParentCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findChannelsByServerId = `-- name: FindChannelsByServerId :many
SELECT id, created_at, updated_at, deleted_at, name, description, server_id, ordering, parent_category FROM channels WHERE server_id = $1 AND deleted_at IS NULL ORDER BY ordering
`

func (q *Queries) FindChannelsByServerId(ctx context.Context, serverID uuid.UUID) ([]Channel, error) {
	rows, err := q.db.Query(ctx, findChannelsByServerId, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.ServerID,
			&i.Ordering,
			&i.ParentCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveChannel = `-- name: SaveChannel :one
INSERT INTO channels (
	id,
  created_at,
  updated_at,
  deleted_at,
	name,
	description,
	server_id,
	ordering,
	parent_category
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
) 
ON CONFLICT (id)
DO UPDATE SET
  created_at = $2,
  updated_at = $3,
  deleted_at = $4,
	name = $5,
	description = $6,
	server_id = $7,
	ordering = $8,
	parent_category = $9
RETURNING id, created_at, updated_at, deleted_at, name, description, server_id, ordering, parent_category
`

type SaveChannelParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      *time.Time
	Name           string
	Description    string
	ServerID       uuid.UUID
	Ordering       int16
	ParentCategory *uuid.UUID
}

func (q *Queries) SaveChannel(ctx context.Context, arg SaveChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, saveChannel,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Name,
		arg.Description,
		arg.ServerID,
		arg.Ordering,
		arg.ParentCategory,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.ServerID,
		&i.Ordering,
		&i.ParentCategory,
	)
	return i, err
}
