// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: memberships.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteMembership = `-- name: DeleteMembership :exec
DELETE FROM memberships WHERE user_id = $1 AND server_id = $2
`

type DeleteMembershipParams struct {
	UserID   uuid.UUID
	ServerID uuid.UUID
}

func (q *Queries) DeleteMembership(ctx context.Context, arg DeleteMembershipParams) error {
	_, err := q.db.Exec(ctx, deleteMembership, arg.UserID, arg.ServerID)
	return err
}

const findMembership = `-- name: FindMembership :one
SELECT server_id, user_id, created_at, nickname FROM memberships WHERE server_id = $1 AND user_id = $2
`

type FindMembershipParams struct {
	ServerID uuid.UUID
	UserID   uuid.UUID
}

func (q *Queries) FindMembership(ctx context.Context, arg FindMembershipParams) (Membership, error) {
	row := q.db.QueryRow(ctx, findMembership, arg.ServerID, arg.UserID)
	var i Membership
	err := row.Scan(
		&i.ServerID,
		&i.UserID,
		&i.CreatedAt,
		&i.Nickname,
	)
	return i, err
}

const findMembershipsByServerId = `-- name: FindMembershipsByServerId :many
SELECT server_id, user_id, created_at, nickname FROM memberships WHERE server_id = $1
`

func (q *Queries) FindMembershipsByServerId(ctx context.Context, serverID uuid.UUID) ([]Membership, error) {
	rows, err := q.db.Query(ctx, findMembershipsByServerId, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ServerID,
			&i.UserID,
			&i.CreatedAt,
			&i.Nickname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMembershipsByUserId = `-- name: FindMembershipsByUserId :many
SELECT server_id, user_id, created_at, nickname FROM memberships WHERE user_id = $1
`

func (q *Queries) FindMembershipsByUserId(ctx context.Context, userID uuid.UUID) ([]Membership, error) {
	rows, err := q.db.Query(ctx, findMembershipsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ServerID,
			&i.UserID,
			&i.CreatedAt,
			&i.Nickname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMembership = `-- name: SaveMembership :one
INSERT INTO memberships (
  server_id,
  user_id,
  created_at,
  nickname
) VALUES (
  $1,
  $2,
  $3,
  $4
)
ON CONFLICT (server_id, user_id)
DO UPDATE SET
  nickname = $4
RETURNING server_id, user_id, created_at, nickname
`

type SaveMembershipParams struct {
	ServerID  uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	Nickname  string
}

func (q *Queries) SaveMembership(ctx context.Context, arg SaveMembershipParams) (Membership, error) {
	row := q.db.QueryRow(ctx, saveMembership,
		arg.ServerID,
		arg.UserID,
		arg.CreatedAt,
		arg.Nickname,
	)
	var i Membership
	err := row.Scan(
		&i.ServerID,
		&i.UserID,
		&i.CreatedAt,
		&i.Nickname,
	)
	return i, err
}
