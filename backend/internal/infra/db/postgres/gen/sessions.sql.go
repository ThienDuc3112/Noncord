// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id,
  rotation_count,
  created_at,
  updated_at,
  revoked_at,
  user_id,
  user_agent
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
) 
ON CONFLICT (id)
DO UPDATE SET 
  rotation_count = $2,
  created_at = $3,
  updated_at = $4,
  revoked_at = $5,
  user_id = $6,
  user_agent = $7
RETURNING id, rotation_count, created_at, updated_at, revoked_at, user_id, user_agent
`

type CreateSessionParams struct {
	ID            uuid.UUID
	RotationCount int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	RevokedAt     sql.NullTime
	UserID        uuid.UUID
	UserAgent     string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.RotationCount,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RevokedAt,
		arg.UserID,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RotationCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RevokedAt,
		&i.UserID,
		&i.UserAgent,
	)
	return i, err
}
