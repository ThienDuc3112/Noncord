// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteServer = `-- name: DeleteServer :exec
UPDATE servers SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteServer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteServer, id)
	return err
}

const findServerById = `-- name: FindServerById :one
SELECT id, created_at, updated_at, deleted_at, name, description, icon_url, banner_url, need_approval, default_role, announcement_channel, owner FROM servers WHERE id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) FindServerById(ctx context.Context, id uuid.UUID) (Server, error) {
	row := q.db.QueryRow(ctx, findServerById, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.BannerUrl,
		&i.NeedApproval,
		&i.DefaultRole,
		&i.AnnouncementChannel,
		&i.Owner,
	)
	return i, err
}

const findServersByIds = `-- name: FindServersByIds :many
SELECT id, created_at, updated_at, deleted_at, name, description, icon_url, banner_url, need_approval, default_role, announcement_channel, owner FROM servers WHERE id = ANY($1::UUID[]) AND deleted_at IS NOT NULL
`

func (q *Queries) FindServersByIds(ctx context.Context, ids []uuid.UUID) ([]Server, error) {
	rows, err := q.db.Query(ctx, findServersByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.IconUrl,
			&i.BannerUrl,
			&i.NeedApproval,
			&i.DefaultRole,
			&i.AnnouncementChannel,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveServer = `-- name: SaveServer :one
INSERT INTO servers (
	id,
  created_at,
  updated_at,
	name,
	description,
	icon_url,
  banner_url,
	need_approval,
	default_role,
	announcement_channel,
  owner
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11
) 
ON CONFLICT (id)
DO UPDATE SET 
  created_at = $2,
  updated_at = $3,
	name = $4,
	description = $5,
	icon_url = $6,
  banner_url = $7,
	need_approval = $8,
	default_role = $9,
	announcement_channel = $10,
  owner = $11
RETURNING id, created_at, updated_at, deleted_at, name, description, icon_url, banner_url, need_approval, default_role, announcement_channel, owner
`

type SaveServerParams struct {
	ID                  uuid.UUID
	CreatedAt           time.Time
	UpdatedAt           time.Time
	Name                string
	Description         string
	IconUrl             string
	BannerUrl           string
	NeedApproval        bool
	DefaultRole         *uuid.UUID
	AnnouncementChannel *uuid.UUID
	Owner               uuid.UUID
}

func (q *Queries) SaveServer(ctx context.Context, arg SaveServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, saveServer,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.IconUrl,
		arg.BannerUrl,
		arg.NeedApproval,
		arg.DefaultRole,
		arg.AnnouncementChannel,
		arg.Owner,
	)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.BannerUrl,
		&i.NeedApproval,
		&i.DefaultRole,
		&i.AnnouncementChannel,
		&i.Owner,
	)
	return i, err
}
