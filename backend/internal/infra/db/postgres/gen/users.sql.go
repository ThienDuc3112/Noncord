// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  created_at,
  updated_at,
  deleted_at,
  username,
  display_name,
  about_me,
  email,
  password,
  disabled,
  avatar_url,
  banner_url,
  flags
) VALUES ( 
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13
)
RETURNING id, created_at, updated_at, deleted_at, username, display_name, about_me, email, password, disabled, avatar_url, banner_url, flags
`

type CreateUserParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   sql.NullTime
	Username    string
	DisplayName string
	AboutMe     string
	Email       string
	Password    sql.NullString
	Disabled    bool
	AvatarUrl   string
	BannerUrl   string
	Flags       int16
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Username,
		arg.DisplayName,
		arg.AboutMe,
		arg.Email,
		arg.Password,
		arg.Disabled,
		arg.AvatarUrl,
		arg.BannerUrl,
		arg.Flags,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.DisplayName,
		&i.AboutMe,
		&i.Email,
		&i.Password,
		&i.Disabled,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.Flags,
	)
	return i, err
}
