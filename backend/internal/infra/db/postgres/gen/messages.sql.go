// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: messages.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const findMessageById = `-- name: FindMessageById :one
SELECT id, created_at, updated_at, deleted_at, channel_id, group_id, author_id, message FROM messages WHERE id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) FindMessageById(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, findMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ChannelID,
		&i.GroupID,
		&i.AuthorID,
		&i.Message,
	)
	return i, err
}

const findMessagesByChannelId = `-- name: FindMessagesByChannelId :many
SELECT id, created_at, updated_at, deleted_at, channel_id, group_id, author_id, message FROM messages WHERE channel_id = $1 AND created_at < $2 AND deleted_at IS NOT NULL ORDER BY created_at DESC LIMIT $3
`

type FindMessagesByChannelIdParams struct {
	ChannelID *uuid.UUID
	CreatedAt time.Time
	Limit     int32
}

func (q *Queries) FindMessagesByChannelId(ctx context.Context, arg FindMessagesByChannelIdParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, findMessagesByChannelId, arg.ChannelID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ChannelID,
			&i.GroupID,
			&i.AuthorID,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMessagesByGroupId = `-- name: FindMessagesByGroupId :many
SELECT id, created_at, updated_at, deleted_at, channel_id, group_id, author_id, message FROM messages WHERE group_id = $1 AND created_at < $2 AND deleted_at IS NOT NULL ORDER BY created_at DESC LIMIT $3
`

type FindMessagesByGroupIdParams struct {
	GroupID   *uuid.UUID
	CreatedAt time.Time
	Limit     int32
}

func (q *Queries) FindMessagesByGroupId(ctx context.Context, arg FindMessagesByGroupIdParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, findMessagesByGroupId, arg.GroupID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ChannelID,
			&i.GroupID,
			&i.AuthorID,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessage = `-- name: SaveMessage :one
INSERT INTO messages (
	id,
  created_at,
  updated_at,
  deleted_at,
  channel_id,
  group_id,
  author_id,
  message
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
RETURNING id, created_at, updated_at, deleted_at, channel_id, group_id, author_id, message
`

type SaveMessageParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time
	ChannelID *uuid.UUID
	GroupID   *uuid.UUID
	AuthorID  uuid.UUID
	Message   string
}

func (q *Queries) SaveMessage(ctx context.Context, arg SaveMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, saveMessage,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.ChannelID,
		arg.GroupID,
		arg.AuthorID,
		arg.Message,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ChannelID,
		&i.GroupID,
		&i.AuthorID,
		&i.Message,
	)
	return i, err
}
